chatapp/
├── app/
│   ├── __init__.py
│   ├── main.py               # Punto de entrada FastAPI
│   ├── config.py             # Configuración del entorno
│   ├── models/
│   │   ├── __init__.py
│   │   ├── user.py           # Modelos Pydantic y ORM para usuarios
│   │   └── message.py        # Modelos para mensajes
│   ├── db/
│   │   ├── __init__.py
│   │   ├── session.py        # Configuración DB (SQLAlchemy o Tortoise)
│   │   └── init_db.py        # Inicialización y creación de tablas
│   ├── routers/
│   │   ├── __init__.py
│   │   ├── auth.py           # Endpoints de login/registro
│   │   ├── chat.py           # Lógica de WebSockets
│   │   └── user.py           # Endpoints REST de usuario
│   ├── services/
│   │   ├── __init__.py
│   │   ├── auth.py           # Lógica de autenticación, hashing
│   │   └── chat.py           # Broadcast de mensajes, lógica WS
│   └── middleware/
│       ├── __init__.py
│       └── auth.py           # Middleware para verificar tokens
│
├── tests/
│   ├── __init__.py
│   ├── test_auth.py
│   ├── test_chat.py
│   └── test_user.py
│
├── Dockerfile
├── docker-compose.yml
├── requirements.txt
├── .env
├── .gitignore
├── README.md
├── .github/
│   └── workflows/
│       └── ci-cd.yml         # GitHub Actions CI/CD


app/: Lógica principal de la aplicación.

models/: Define los modelos de usuario y mensaje con Pydantic o SQLModel.

routers/: Agrupa los endpoints en archivos organizados por funcionalidad.

services/: Lógica que no pertenece directamente a los endpoints, como hashing, WS.

middleware/: Middleware personalizado para autorización.

db/: Manejo de la base de datos y conexión.

tests/: Contiene pruebas unitarias.

Dockerfile y docker-compose.yml: Para contenerización y despliegue local.

.github/workflows/: Automatización CI/CD con GitHub Actions.
